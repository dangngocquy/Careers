{"version":3,"file":"static/js/558.30183133.chunk.js","mappings":"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","sources":["admin/components/Themtaikhoan.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Layout, Modal, Button, Form, Input, message, List, Card } from 'antd';\r\nimport { auth } from '../../config';\r\nimport { updateEmail, updatePassword, sendPasswordResetEmail, onAuthStateChanged } from 'firebase/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Themtaikhoan = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [isResetModalVisible, setIsResetModalVisible] = useState(false);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                setUsers([{ uid: user.uid, email: user.email }]);\r\n            } else {\r\n                navigate('/login');\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [navigate]);\r\n\r\n    const handleResetModalCancel = () => {\r\n        setIsResetModalVisible(false);\r\n        setSelectedUser(null);\r\n    };\r\n\r\n    const handlePasswordReset = (user) => {\r\n        setSelectedUser(user);\r\n        setIsResetModalVisible(true);\r\n    };\r\n\r\n    const sendPasswordReset = async () => {\r\n        try {\r\n            await sendPasswordResetEmail(auth, selectedUser.email);\r\n            toast.success('Đã gửi email đặt lại mật khẩu.', {\r\n                position: \"top-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n            setIsResetModalVisible(false);\r\n        } catch (error) {\r\n            console.error(\"Lỗi khi gửi email đặt lại mật khẩu:\", error);\r\n            message.error('Lỗi khi gửi email');\r\n        }\r\n    };\r\n\r\n    const showModal = (user = null) => {\r\n        setSelectedUser(user);\r\n        if (user) {\r\n            form.setFieldsValue({ email: user.email, password: '' });\r\n        }\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        setSelectedUser(null);\r\n    };\r\n\r\n    const onFinish = async (values) => {\r\n        const { email, password } = values;\r\n        try {\r\n            const user = auth.currentUser;\r\n            if (user) {\r\n                await updateEmail(user, email);\r\n                if (password) {\r\n                    await updatePassword(user, password);\r\n                }\r\n                message.success('Cập nhật người dùng thành công');\r\n                setUsers(prevUsers => prevUsers.map(u => u.uid === user.uid ? { ...u, email } : u));\r\n                setIsModalVisible(false);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error updating user:\", error);\r\n            message.error('Lỗi khi xử lý');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Layout className=\"site-layout\">\r\n            <title>Thông tin tài khoản NISO</title>\r\n            <Content style={{ margin: '0 16px' }}>\r\n                <div className=\"site-layout-background\">\r\n                    <List\r\n                        grid={{\r\n                            gutter: 16,\r\n                            xs: 1,\r\n                            sm: 1,\r\n                            md: 2,\r\n                            lg: 2,\r\n                            xl: 3,\r\n                            xxl: 3,\r\n                        }}\r\n                        dataSource={users}\r\n                        renderItem={user => (\r\n                            <List.Item>\r\n                                <Card title={user.email}>\r\n                                    <Button\r\n                                        style={{ marginBottom: '10px', width: '100%' }}\r\n                                        onClick={() => showModal(user)}\r\n                                    >\r\n                                        Đổi mật khẩu\r\n                                    </Button>\r\n                                    <Button\r\n                                        style={{ width: '100%' }}\r\n                                        onClick={() => handlePasswordReset(user)}\r\n                                    >\r\n                                        Gửi Email Đặt Lại Mật Khẩu\r\n                                    </Button>\r\n                                </Card>\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </Content>\r\n            <Modal\r\n                title=\"Đổi mật khẩu\"\r\n                visible={isModalVisible}\r\n                onCancel={handleCancel}\r\n                footer={null}\r\n            >\r\n                <Form form={form} onFinish={onFinish} layout=\"vertical\">\r\n                    <Form.Item name=\"email\" label=\"Email\" rules={[{ required: true, type: 'email', message: 'Vui lòng nhập email hợp lệ!' }]}>\r\n                        <Input disabled />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"password\" label=\"Mật khẩu\" rules={[{ required: true, message: 'Vui lòng nhập mật khẩu!' }]}>\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Cập nhật\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Modal\r\n                title=\"Đặt lại mật khẩu\"\r\n                visible={isResetModalVisible}\r\n                onCancel={handleResetModalCancel}\r\n                onOk={sendPasswordReset}\r\n                okText=\"Gửi Email\"\r\n                cancelText=\"Hủy\"\r\n            >\r\n                <p>Chúng tôi sẽ gửi cho bạn một email vào {selectedUser?.email} để đặt lại mật khẩu.</p>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Themtaikhoan;"],"names":["Content","Layout","Themtaikhoan","users","setUsers","useState","isResetModalVisible","setIsResetModalVisible","isModalVisible","setIsModalVisible","form","Form","useForm","selectedUser","setSelectedUser","navigate","useNavigate","useEffect","unsubscribe","onAuthStateChanged","auth","user","uid","email","_jsxs","className","children","_jsx","style","margin","List","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","Item","Card","title","Button","marginBottom","width","onClick","arguments","length","undefined","setFieldsValue","password","showModal","handlePasswordReset","Modal","visible","onCancel","handleCancel","footer","onFinish","async","values","currentUser","updateEmail","updatePassword","message","success","prevUsers","map","u","error","console","layout","name","label","rules","required","type","Input","disabled","Password","htmlType","handleResetModalCancel","onOk","sendPasswordResetEmail","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","okText","cancelText"],"sourceRoot":""}