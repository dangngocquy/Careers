{"version":3,"file":"static/js/558.2b5a89bd.chunk.js","mappings":"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","sources":["admin/components/Themtaikhoan.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Layout, Table, Modal, Form, Input, Button, message } from 'antd';\r\nimport { PlusOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport { auth } from '../../config';\r\nimport { createUserWithEmailAndPassword, updateEmail, updatePassword, deleteUser, sendPasswordResetEmail, onAuthStateChanged } from 'firebase/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Themtaikhoan = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);\r\n    const [isResetModalVisible, setIsResetModalVisible] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [editingUser, setEditingUser] = useState(null);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                setUsers([{ uid: user.uid, email: user.email }]);\r\n            } else {\r\n                navigate('/login');\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [navigate]);\r\n\r\n    const showModal = (user = null) => {\r\n        setEditingUser(user);\r\n        if (user) {\r\n            form.setFieldsValue({ email: user.email, password: '' });\r\n        } else {\r\n            form.resetFields();\r\n        }\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        setEditingUser(null);\r\n    };\r\n\r\n    const handleDeleteModalCancel = () => {\r\n        setIsDeleteModalVisible(false);\r\n        setSelectedUser(null);\r\n    };\r\n\r\n    const handleResetModalCancel = () => {\r\n        setIsResetModalVisible(false);\r\n        setSelectedUser(null);\r\n    };\r\n\r\n    const onFinish = async (values) => {\r\n        const { email, password } = values;\r\n\r\n        try {\r\n            if (editingUser) {\r\n                const user = auth.currentUser;\r\n                if (user) {\r\n                    await updateEmail(user, email);\r\n                    if (password) {\r\n                        await updatePassword(user, password);\r\n                    }\r\n                    message.success('Cập nhật người dùng thành công');\r\n                    setUsers(prevUsers => prevUsers.map(u => u.uid === user.uid ? { ...u, email } : u));\r\n                }\r\n            } else {\r\n                const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n                const newUser = userCredential.user;\r\n                message.success('Thêm người dùng thành công');\r\n                setUsers(prevUsers => [...prevUsers, { uid: newUser.uid, email: newUser.email }]);\r\n            }\r\n            setIsModalVisible(false);\r\n        } catch (error) {\r\n            console.error(\"Error handling user:\", error);\r\n            message.error('Lỗi khi xử lý');\r\n        }\r\n    };\r\n\r\n    const handleDelete = (user) => {\r\n        setSelectedUser(user);\r\n        setIsDeleteModalVisible(true);\r\n    };\r\n\r\n    const confirmDelete = async () => {\r\n        try {\r\n            const userToDelete = auth.currentUser;\r\n            if (userToDelete && userToDelete.uid === selectedUser.uid) {\r\n                await deleteUser(userToDelete);\r\n                message.success('Xóa người dùng thành công');\r\n                setUsers(prevUsers => prevUsers.filter(u => u.uid !== selectedUser.uid));\r\n            } else {\r\n                message.error('Bạn chỉ có thể xóa tài khoản của chính mình');\r\n            }\r\n            setIsDeleteModalVisible(false);\r\n        } catch (error) {\r\n            console.error(\"Lỗi khi xóa người dùng:\", error);\r\n            message.error('Lỗi khi xóa');\r\n        }\r\n    };\r\n\r\n    const handlePasswordReset = (user) => {\r\n        setSelectedUser(user);\r\n        setIsResetModalVisible(true);\r\n    };\r\n\r\n    const sendPasswordReset = async () => {\r\n        try {\r\n            await sendPasswordResetEmail(auth, selectedUser.email);\r\n            message.success('Đã gửi email đặt lại mật khẩu.');\r\n            setIsResetModalVisible(false);\r\n        } catch (error) {\r\n            console.error(\"Lỗi khi gửi email đặt lại mật khẩu:\", error);\r\n            message.error('Lỗi khi gửi email');\r\n        }\r\n    };\r\n\r\n    const columns = [\r\n        { title: 'Email', dataIndex: 'email', key: 'email' },\r\n        {\r\n            title: 'Thao tác',\r\n            key: 'actions',\r\n            render: (_, record) => (\r\n                <span>\r\n                    <Button icon={<EditOutlined />} onClick={() => showModal(record)} />\r\n                    <Button icon={<DeleteOutlined />} onClick={() => handleDelete(record)} style={{ marginLeft: 8 }} />\r\n                    <Button onClick={() => handlePasswordReset(record)} style={{ marginLeft: 8 }}>Đặt lại mật khẩu</Button>\r\n                </span>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Layout className=\"site-layout\">\r\n            <title>Quản lý tài khoản NISO</title>\r\n            <Content style={{ margin: '0 16px' }}>\r\n                <div className=\"site-layout-background\">\r\n                    <Button\r\n                        type=\"primary\"\r\n                        icon={<PlusOutlined />}\r\n                        onClick={() => showModal()}\r\n                        style={{ marginTop: 16, marginBottom: 16 }}\r\n                    >\r\n                        Thêm tài khoản\r\n                    </Button>\r\n                    <Table columns={columns} dataSource={users} scroll={{ x: true }}\r\n                        style={{ width: '100%', whiteSpace: 'nowrap' }} />\r\n                </div>\r\n            </Content>\r\n\r\n            <Modal\r\n                title={editingUser ? \"Sửa thông tin\" : \"Thêm tài khoản\"}\r\n                visible={isModalVisible}\r\n                onCancel={handleCancel}\r\n                footer={null}\r\n            >\r\n                <Form form={form} onFinish={onFinish} layout=\"vertical\">\r\n                    <Form.Item name=\"email\" label=\"Email\" rules={[{ required: true, type: 'email', message: 'Vui lòng nhập email hợp lệ!' }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"password\" label=\"Mật khẩu\" rules={[{ required: !editingUser, message: 'Vui lòng nhập mật khẩu!' }]}>\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            {editingUser ? \"Cập nhật\" : \"Thêm\"}\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n\r\n            <Modal\r\n                title=\"Xác nhận xóa\"\r\n                visible={isDeleteModalVisible}\r\n                onCancel={handleDeleteModalCancel}\r\n                onOk={confirmDelete}\r\n                okText=\"Xóa\"\r\n                cancelText=\"Hủy\"\r\n            >\r\n                <p>Bạn có chắc chắn muốn xóa tài khoản {selectedUser?.email} không?</p>\r\n            </Modal>\r\n\r\n            <Modal\r\n                title=\"Đặt lại mật khẩu\"\r\n                visible={isResetModalVisible}\r\n                onCancel={handleResetModalCancel}\r\n                onOk={sendPasswordReset}\r\n                okText=\"Gửi Email\"\r\n                cancelText=\"Hủy\"\r\n            >\r\n                <p>Chúng tôi sẽ gửi cho bạn một email vào {selectedUser?.email} để đặt lại mật khẩu.</p>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Themtaikhoan;\r\n"],"names":["Content","Layout","Themtaikhoan","users","setUsers","useState","isModalVisible","setIsModalVisible","isDeleteModalVisible","setIsDeleteModalVisible","isResetModalVisible","setIsResetModalVisible","form","Form","useForm","editingUser","setEditingUser","selectedUser","setSelectedUser","navigate","useNavigate","useEffect","unsubscribe","onAuthStateChanged","auth","user","uid","email","showModal","arguments","length","undefined","setFieldsValue","password","resetFields","columns","title","dataIndex","key","render","_","record","_jsxs","children","_jsx","Button","icon","EditOutlined","onClick","DeleteOutlined","style","marginLeft","className","margin","type","PlusOutlined","marginTop","marginBottom","Table","dataSource","scroll","x","width","whiteSpace","Modal","visible","onCancel","handleCancel","footer","onFinish","async","values","currentUser","updateEmail","updatePassword","message","success","prevUsers","map","u","newUser","createUserWithEmailAndPassword","error","console","layout","Item","name","label","rules","required","Input","Password","htmlType","handleDeleteModalCancel","onOk","userToDelete","deleteUser","filter","okText","cancelText","handleResetModalCancel","sendPasswordResetEmail"],"sourceRoot":""}