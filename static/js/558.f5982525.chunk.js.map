{"version":3,"file":"static/js/558.f5982525.chunk.js","mappings":"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","sources":["admin/components/Themtaikhoan.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Layout, Modal, Button, Form, Input, message, List, Card } from 'antd';\r\nimport { auth } from '../../config';\r\nimport { updateEmail, updatePassword, sendPasswordResetEmail, onAuthStateChanged, reauthenticateWithCredential, EmailAuthProvider } from 'firebase/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Themtaikhoan = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [isResetModalVisible, setIsResetModalVisible] = useState(false);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                setUsers([{ uid: user.uid, email: user.email }]);\r\n            } else {\r\n                navigate('/login');\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, [navigate]);\r\n\r\n    const handleResetModalCancel = () => {\r\n        setIsResetModalVisible(false);\r\n        setSelectedUser(null);\r\n    };\r\n\r\n    const handlePasswordReset = (user) => {\r\n        setSelectedUser(user);\r\n        setIsResetModalVisible(true);\r\n    };\r\n\r\n    const sendPasswordReset = async () => {\r\n        try {\r\n            await sendPasswordResetEmail(auth, selectedUser.email);\r\n            toast.success('Đã gửi email đặt lại mật khẩu.', {\r\n                position: \"top-right\",\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n            setIsResetModalVisible(false);\r\n        } catch (error) {\r\n            console.error(\"Lỗi khi gửi email đặt lại mật khẩu:\", error);\r\n            message.error('Lỗi khi gửi email');\r\n        }\r\n    };\r\n\r\n    const showModal = (user = null) => {\r\n        setSelectedUser(user);\r\n        if (user) {\r\n            form.setFieldsValue({ email: user.email, password: '', currentPassword: '' });\r\n        }\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        setSelectedUser(null);\r\n        form.resetFields();\r\n    };\r\n\r\n    const onFinish = async (values) => {\r\n        const { email, password, currentPassword } = values;\r\n        try {\r\n            const user = auth.currentUser;\r\n            if (user) {\r\n                const credential = EmailAuthProvider.credential(user.email, currentPassword);\r\n                await reauthenticateWithCredential(user, credential);\r\n                \r\n                if (email !== user.email) {\r\n                    await updateEmail(user, email);\r\n                }\r\n                if (password) {\r\n                    await updatePassword(user, password);\r\n                }\r\n                message.success('Cập nhật người dùng thành công');\r\n                setUsers(prevUsers => prevUsers.map(u => u.uid === user.uid ? { ...u, email } : u));\r\n                setIsModalVisible(false);\r\n                form.resetFields();\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error updating user:\", error);\r\n            if (error.code === 'auth/wrong-password') {\r\n                message.error('Mật khẩu hiện tại không đúng');\r\n            } else {\r\n                message.error('Mật khẩu hiện tại không đúng');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Layout className=\"site-layout\">\r\n            <title>Thông tin tài khoản NISO</title>\r\n            <Content>\r\n                <div className=\"site-layout-background\">\r\n                    <List\r\n                        grid={{\r\n                            gutter: 16,\r\n                            column: 1\r\n                        }}\r\n                        dataSource={users}\r\n                        renderItem={user => (\r\n                            <List.Item>\r\n                                <Card title={user.email} style={{ width: '100%' }}>\r\n                                    <Button\r\n                                        style={{ marginBottom: '10px', width: '100%' }}\r\n                                        onClick={() => showModal(user)}\r\n                                    >\r\n                                        Đổi mật khẩu\r\n                                    </Button>\r\n                                    <Button\r\n                                        style={{ width: '100%' }}\r\n                                        onClick={() => handlePasswordReset(user)}\r\n                                    >\r\n                                        Gửi Email Đặt Lại Mật Khẩu\r\n                                    </Button>\r\n                                </Card>\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </Content>\r\n            <Modal\r\n                title=\"Đổi mật khẩu\"\r\n                visible={isModalVisible}\r\n                onCancel={handleCancel}\r\n                footer={null}\r\n            >\r\n                <Form form={form} onFinish={onFinish} layout=\"vertical\">\r\n                    <Form.Item name=\"email\" label=\"Email\" rules={[{ required: true, type: 'email', message: 'Vui lòng nhập email hợp lệ!' }]}  >\r\n                        <Input disabled/>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"currentPassword\" label=\"Mật khẩu hiện tại\" rules={[{ required: true, message: 'Vui lòng nhập mật khẩu hiện tại!' }]}>\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"password\" label=\"Mật khẩu mới\" rules={[{ required: true, message: 'Vui lòng nhập mật khẩu mới!' }]}>\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Cập nhật\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Modal\r\n                title=\"Đặt lại mật khẩu\"\r\n                visible={isResetModalVisible}\r\n                onCancel={handleResetModalCancel}\r\n                onOk={sendPasswordReset}\r\n                okText=\"Gửi Email\"\r\n                cancelText=\"Hủy\"\r\n            >\r\n                <p>Chúng tôi sẽ gửi cho bạn một email vào {selectedUser?.email} để đặt lại mật khẩu.</p>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Themtaikhoan;"],"names":["Content","Layout","Themtaikhoan","users","setUsers","useState","isResetModalVisible","setIsResetModalVisible","isModalVisible","setIsModalVisible","form","Form","useForm","selectedUser","setSelectedUser","navigate","useNavigate","useEffect","unsubscribe","onAuthStateChanged","auth","user","uid","email","_jsxs","className","children","_jsx","List","grid","gutter","column","dataSource","renderItem","Item","Card","title","style","width","Button","marginBottom","onClick","arguments","length","undefined","setFieldsValue","password","currentPassword","showModal","handlePasswordReset","Modal","visible","onCancel","handleCancel","resetFields","footer","onFinish","async","values","currentUser","credential","EmailAuthProvider","reauthenticateWithCredential","updateEmail","updatePassword","message","success","prevUsers","map","u","error","console","code","layout","name","label","rules","required","type","Input","disabled","Password","htmlType","handleResetModalCancel","onOk","sendPasswordResetEmail","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","okText","cancelText"],"sourceRoot":""}